#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script interactif pour tester les APIs du module edu_accounting_pro
Usage: python3 interactive_api_test.py
"""

import json
import requests
import sys
from datetime import datetime
from test_config import ODOO_CONFIG, TEST_CONFIG, ENDPOINTS_TO_TEST, ERROR_MESSAGES


class InteractiveAPITester:
    """Testeur interactif pour les APIs"""
    
    def __init__(self):
        self.session = requests.Session()
        self.session_id = None
        self.base_url = ODOO_CONFIG['BASE_URL']
        self.database = ODOO_CONFIG['DATABASE']
        self.username = ODOO_CONFIG['USERNAME']
        self.password = ODOO_CONFIG['PASSWORD']
        
    def print_banner(self):
        """Affiche la banni√®re d'accueil"""
        print("=" * 60)
        print("üöÄ TESTEUR INTERACTIF API - edu_accounting_pro")
        print("=" * 60)
        print(f"üìç URL: {self.base_url}")
        print(f"üóÑÔ∏è  Base de donn√©es: {self.database}")
        print(f"üë§ Utilisateur: {self.username}")
        print("=" * 60)
        print()
    
    def authenticate(self):
        """Authentifie l'utilisateur"""
        print("üîê Authentification en cours...")
        
        try:
            auth_url = f"{self.base_url}/web/session/authenticate"
            auth_data = {
                "jsonrpc": "2.0",
                "method": "call",
                "params": {
                    "db": self.database,
                    "login": self.username,
                    "password": self.password
                },
                "id": 1
            }
            
            response = self.session.post(auth_url, json=auth_data, timeout=TEST_CONFIG['TIMEOUT'])
            result = response.json()
            
            if result.get("result") and result["result"].get("session_id"):
                self.session_id = result["result"]["session_id"]
                print("‚úÖ Authentification r√©ussie!")
                return True
            else:
                print("‚ùå √âchec de l'authentification")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur lors de l'authentification: {str(e)}")
            return False
    
    def make_request(self, endpoint, data=None):
        """Effectue une requ√™te API"""
        try:
            url = f"{self.base_url}{endpoint}"
            
            if data is None:
                data = {}
            
            request_data = {
                "jsonrpc": "2.0",
                "method": "call",
                "params": data,
                "id": 1
            }
            
            response = self.session.post(url, json=request_data, timeout=TEST_CONFIG['TIMEOUT'])
            
            if response.status_code == 200:
                result = response.json()
                return result.get("result", {})
            else:
                return {"success": False, "error": f"HTTP {response.status_code}"}
                
        except Exception as e:
            return {"success": False, "error": str(e)}
    
    def display_menu(self):
        """Affiche le menu principal"""
        print("\nüìã MENU PRINCIPAL")
        print("-" * 40)
        print("1. Tester tous les endpoints")
        print("2. Tester un endpoint sp√©cifique")
        print("3. Tester les endpoints Fee Structure")
        print("4. Tester les endpoints Fee Type")
        print("5. Tester les endpoints Student Invoice")
        print("6. Tester les endpoints Student Payment")
        print("7. Tester les endpoints Dashboard")
        print("8. Tester un endpoint personnalis√©")
        print("9. Afficher la configuration actuelle")
        print("0. Quitter")
        print("-" * 40)
    
    def test_all_endpoints(self):
        """Teste tous les endpoints d√©finis"""
        print("\nüîç Test de tous les endpoints...")
        print("=" * 50)
        
        results = []
        
        for i, endpoint_config in enumerate(ENDPOINTS_TO_TEST, 1):
            print(f"\n[{i}/{len(ENDPOINTS_TO_TEST)}] {endpoint_config['name']}")
            print(f"üîó {endpoint_config['endpoint']}")
            
            response = self.make_request(endpoint_config['endpoint'], endpoint_config['data'])
            
            if response.get('success', False):
                print("‚úÖ Succ√®s")
                if TEST_CONFIG['VERBOSE']:
                    if 'data' in response:
                        data_count = len(response['data']) if isinstance(response['data'], list) else 1
                        print(f"   üìä Donn√©es: {data_count} √©l√©ment(s)")
                    print(f"   ‚è±Ô∏è  R√©ponse: {json.dumps(response, indent=2, ensure_ascii=False)[:200]}...")
            else:
                print("‚ùå √âchec")
                print(f"   ‚ùó Erreur: {response.get('error', 'Erreur inconnue')}")
            
            results.append({
                'name': endpoint_config['name'],
                'endpoint': endpoint_config['endpoint'],
                'success': response.get('success', False),
                'error': response.get('error', ''),
                'timestamp': datetime.now().isoformat()
            })
        
        # R√©sum√©
        print("\n" + "=" * 50)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 50)
        
        total = len(results)
        passed = sum(1 for r in results if r['success'])
        failed = total - passed
        
        print(f"Total: {total}")
        print(f"R√©ussis: {passed} ‚úÖ")
        print(f"√âchou√©s: {failed} ‚ùå")
        print(f"Taux de r√©ussite: {(passed/total)*100:.1f}%")
        
        if failed > 0:
            print("\n‚ùå Endpoints √©chou√©s:")
            for result in results:
                if not result['success']:
                    print(f"   - {result['name']}: {result['error']}")
    
    def test_specific_endpoint(self):
        """Teste un endpoint sp√©cifique"""
        print("\nüéØ Test d'un endpoint sp√©cifique")
        print("-" * 40)
        
        # Afficher les endpoints disponibles
        for i, endpoint_config in enumerate(ENDPOINTS_TO_TEST, 1):
            print(f"{i}. {endpoint_config['name']} - {endpoint_config['endpoint']}")
        
        try:
            choice = int(input("\nChoisissez un endpoint (num√©ro): "))
            if 1 <= choice <= len(ENDPOINTS_TO_TEST):
                endpoint_config = ENDPOINTS_TO_TEST[choice - 1]
                
                print(f"\nüîç Test de: {endpoint_config['name']}")
                print(f"üîó Endpoint: {endpoint_config['endpoint']}")
                print(f"üìù Donn√©es: {json.dumps(endpoint_config['data'], indent=2, ensure_ascii=False)}")
                
                response = self.make_request(endpoint_config['endpoint'], endpoint_config['data'])
                
                print("\nüì® R√âPONSE:")
                print(json.dumps(response, indent=2, ensure_ascii=False))
                
            else:
                print("‚ùå Choix invalide")
                
        except ValueError:
            print("‚ùå Veuillez entrer un nombre valide")
    
    def test_custom_endpoint(self):
        """Teste un endpoint personnalis√©"""
        print("\nüõ†Ô∏è  Test d'un endpoint personnalis√©")
        print("-" * 40)
        
        endpoint = input("Entrez l'endpoint (ex: /api/fee-structures): ")
        
        print("Entrez les donn√©es JSON (ou laissez vide pour aucune donn√©e):")
        data_input = input("Donn√©es: ")
        
        data = {}
        if data_input.strip():
            try:
                data = json.loads(data_input)
            except json.JSONDecodeError:
                print("‚ùå Donn√©es JSON invalides")
                return
        
        print(f"\nüîç Test de: {endpoint}")
        print(f"üìù Donn√©es: {json.dumps(data, indent=2, ensure_ascii=False)}")
        
        response = self.make_request(endpoint, data)
        
        print("\nüì® R√âPONSE:")
        print(json.dumps(response, indent=2, ensure_ascii=False))
    
    def display_config(self):
        """Affiche la configuration actuelle"""
        print("\n‚öôÔ∏è  CONFIGURATION ACTUELLE")
        print("=" * 40)
        print(f"URL Odoo: {ODOO_CONFIG['BASE_URL']}")
        print(f"Base de donn√©es: {ODOO_CONFIG['DATABASE']}")
        print(f"Utilisateur: {ODOO_CONFIG['USERNAME']}")
        print(f"Timeout: {TEST_CONFIG['TIMEOUT']}s")
        print(f"Mode verbose: {TEST_CONFIG['VERBOSE']}")
        print(f"Nombre d'endpoints: {len(ENDPOINTS_TO_TEST)}")
        print("=" * 40)
    
    def run(self):
        """Lance le testeur interactif"""
        self.print_banner()
        
        # Authentification
        if not self.authenticate():
            print("‚ùå Impossible de continuer sans authentification")
            return
        
        # Boucle principale
        while True:
            self.display_menu()
            
            try:
                choice = input("\nüëâ Votre choix: ")
                
                if choice == '1':
                    self.test_all_endpoints()
                elif choice == '2':
                    self.test_specific_endpoint()
                elif choice == '3':
                    print("üèóÔ∏è  Tests Fee Structure - √Ä impl√©menter")
                elif choice == '4':
                    print("üè∑Ô∏è  Tests Fee Type - √Ä impl√©menter")
                elif choice == '5':
                    print("üßæ Tests Student Invoice - √Ä impl√©menter")
                elif choice == '6':
                    print("üí≥ Tests Student Payment - √Ä impl√©menter")
                elif choice == '7':
                    print("üìä Tests Dashboard - √Ä impl√©menter")
                elif choice == '8':
                    self.test_custom_endpoint()
                elif choice == '9':
                    self.display_config()
                elif choice == '0':
                    print("üëã Au revoir!")
                    break
                else:
                    print("‚ùå Choix invalide")
                    
            except KeyboardInterrupt:
                print("\n\nüëã Au revoir!")
                break
            except Exception as e:
                print(f"‚ùå Erreur: {str(e)}")
        
        print("\n‚úÖ Tests termin√©s!")


if __name__ == "__main__":
    # V√©rifier les d√©pendances
    try:
        import requests
    except ImportError:
        print("‚ùå Le module 'requests' n'est pas install√©")
        print("üí° Installez-le avec: pip install requests")
        sys.exit(1)
    
    # Lancer le testeur
    tester = InteractiveAPITester()
    tester.run() 